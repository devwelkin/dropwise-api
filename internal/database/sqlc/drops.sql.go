// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: drops.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createDrop = `-- name: CreateDrop :one
INSERT INTO drops (
    user_id,
    topic,
    url,
    user_notes,
    priority
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, user_id, topic, url, user_notes, added_date, updated_at, status, last_sent_date, send_count, priority
`

type CreateDropParams struct {
	UserID    sql.NullString
	Topic     string
	Url       string
	UserNotes sql.NullString
	Priority  sql.NullInt32
}

func (q *Queries) CreateDrop(ctx context.Context, arg CreateDropParams) (Drop, error) {
	row := q.db.QueryRowContext(ctx, createDrop,
		arg.UserID,
		arg.Topic,
		arg.Url,
		arg.UserNotes,
		arg.Priority,
	)
	var i Drop
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Topic,
		&i.Url,
		&i.UserNotes,
		&i.AddedDate,
		&i.UpdatedAt,
		&i.Status,
		&i.LastSentDate,
		&i.SendCount,
		&i.Priority,
	)
	return i, err
}

const getDrop = `-- name: GetDrop :one
SELECT id, user_id, topic, url, user_notes, added_date, updated_at, status, last_sent_date, send_count, priority FROM drops
WHERE id = $1
`

func (q *Queries) GetDrop(ctx context.Context, id uuid.UUID) (Drop, error) {
	row := q.db.QueryRowContext(ctx, getDrop, id)
	var i Drop
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Topic,
		&i.Url,
		&i.UserNotes,
		&i.AddedDate,
		&i.UpdatedAt,
		&i.Status,
		&i.LastSentDate,
		&i.SendCount,
		&i.Priority,
	)
	return i, err
}

const listDrops = `-- name: ListDrops :many
SELECT id, user_id, topic, url, user_notes, added_date, updated_at, status, last_sent_date, send_count, priority FROM drops
WHERE user_id = $1
ORDER BY added_date DESC
`

func (q *Queries) ListDrops(ctx context.Context, userID sql.NullString) ([]Drop, error) {
	rows, err := q.db.QueryContext(ctx, listDrops, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Drop
	for rows.Next() {
		var i Drop
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Topic,
			&i.Url,
			&i.UserNotes,
			&i.AddedDate,
			&i.UpdatedAt,
			&i.Status,
			&i.LastSentDate,
			&i.SendCount,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDrop = `-- name: UpdateDrop :one
UPDATE drops
SET
    topic = COALESCE($3, topic),
    url = COALESCE($4, url),
    user_notes = COALESCE($5, user_notes),
    priority = COALESCE($6, priority),
    status = COALESCE($7, status)
    -- updated_at is handled by the database trigger
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, topic, url, user_notes, added_date, updated_at, status, last_sent_date, send_count, priority
`

type UpdateDropParams struct {
	ID        uuid.UUID
	UserID    sql.NullString
	Topic     sql.NullString
	Url       sql.NullString
	UserNotes sql.NullString
	Priority  sql.NullInt32
	Status    sql.NullString
}

func (q *Queries) UpdateDrop(ctx context.Context, arg UpdateDropParams) (Drop, error) {
	row := q.db.QueryRowContext(ctx, updateDrop,
		arg.ID,
		arg.UserID,
		arg.Topic,
		arg.Url,
		arg.UserNotes,
		arg.Priority,
		arg.Status,
	)
	var i Drop
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Topic,
		&i.Url,
		&i.UserNotes,
		&i.AddedDate,
		&i.UpdatedAt,
		&i.Status,
		&i.LastSentDate,
		&i.SendCount,
		&i.Priority,
	)
	return i, err
}
