// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: drops_tags.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addTagToDrop = `-- name: AddTagToDrop :exec
INSERT INTO drops_item_tags (drops_id, tag_id)
VALUES ($1, $2)
ON CONFLICT (drops_id, tag_id) DO NOTHING
`

type AddTagToDropParams struct {
	DropsID uuid.UUID
	TagID   int32
}

// Associates a tag with a drop.
// ON CONFLICT DO NOTHING prevents errors if the association already exists.
func (q *Queries) AddTagToDrop(ctx context.Context, arg AddTagToDropParams) error {
	_, err := q.db.ExecContext(ctx, addTagToDrop, arg.DropsID, arg.TagID)
	return err
}

const getTagsForDrop = `-- name: GetTagsForDrop :many
SELECT t.id, t.name
FROM tags t
JOIN drops_item_tags dit ON t.id = dit.tag_id
WHERE dit.drops_id = $1
ORDER BY t.name
`

// Retrieves all tags associated with a specific drop.
func (q *Queries) GetTagsForDrop(ctx context.Context, dropsID uuid.UUID) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTagsForDrop, dropsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllTagsFromDrop = `-- name: RemoveAllTagsFromDrop :exec
DELETE FROM drops_item_tags
WHERE drops_id = $1
`

// Removes all tag associations for a specific drop.
// Useful when updating a drop's tags to clear existing ones first.
func (q *Queries) RemoveAllTagsFromDrop(ctx context.Context, dropsID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeAllTagsFromDrop, dropsID)
	return err
}

const removeTagFromDrop = `-- name: RemoveTagFromDrop :exec
DELETE FROM drops_item_tags
WHERE drops_id = $1 AND tag_id = $2
`

type RemoveTagFromDropParams struct {
	DropsID uuid.UUID
	TagID   int32
}

// Removes a specific tag association from a drop.
func (q *Queries) RemoveTagFromDrop(ctx context.Context, arg RemoveTagFromDropParams) error {
	_, err := q.db.ExecContext(ctx, removeTagFromDrop, arg.DropsID, arg.TagID)
	return err
}
